#include <iostream>
using namespace std;

#include <math.h>

#include "DoubleArray3D.h"
#include "Grid3D.h"
#include "FileIO_3D.h"
#include "INIT_img3D.h"
#include "common_routines.h"
#include "BC_3D.h"


#define PI 4.0*atan2(1.0,1.0)


void outputU( const DoubleArray3D& u1, const DoubleArray3D& u2, const DoubleArray3D& u3, 
			  const long& kk, 
			  const long bx, const long by, const long bz )
{
	long factor = 256;

	long m = u1.getIndex1Size();
	long n = u1.getIndex2Size();
	long p = u1.getIndex3Size();

	DoubleArray3D U1(m,n,p);
	DoubleArray3D U2(m,n,p);
	DoubleArray3D U3(m,n,p);

	long i,j,k;
	for( k = 0; k < p; k++ )
	{
		for( j = 0; j < n; j++ )
		{
			for( i = 0; i < m; i++ )
			{
				U1(i,j,k) = u1(i,j,k) + 25.0;
				U2(i,j,k) = u2(i,j,k) + 25.0;
				U3(i,j,k) = u3(i,j,k) + 25.0;
			}
		}
	}

	FileIO_3D IO;
	IO.write_bin_usi( U1, "u1_", kk, factor, bx, by, bz );
	IO.write_bin_usi( U2, "u2_", kk, factor, bx, by, bz );
	IO.write_bin_usi( U3, "u3_", kk, factor, bx, by, bz );
}


void initialize( DoubleArray3D& u, const Grid3D& grid, const long IMGnumber, const long volN )
{
	FileIO_3D IO;
	
	long   m    = grid.m;
	long   n    = grid.n;
	long   p    = grid.p;
	double dx   = grid.dx;
	double dy   = grid.dy;
	double dz   = grid.dz;
	double xMin = grid.xMin;
	double xMax = grid.xMax;
	double yMin = grid.yMin;
	double yMax = grid.yMax;
	double zMin = grid.zMin;
	double zMax = grid.zMax;

	long i, j, k;

	double xcent = (m-1) / 2.0;
	double ycent = (n-1) / 2.0;
	double zcent = (p-1) / 2.0;
	double r = (min(min(m,n),p))/3.0;

	double xcent2 = xcent+(m/10.0);
	double ycent2 = ycent+(m/10.0);
	double zcent2 = zcent+(m/10.0);
	
	double xx, yy, zz;

	DoubleArray3D A;
	DoubleArray3D u_temp(m,n,p);

	double maxI;		// maximum intensity
	string fname;


	switch(IMGnumber)
	{
	case 1:			// Ball
		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					xx = double(i)*dx + xMin;
					yy = double(j)*dy + yMin;
					zz = double(k)*dz + zMin;
					if( sqrt( (xx-xcent)*(xx-xcent) + (yy-ycent)*(yy-ycent) + (zz-zcent)*(zz-zcent) ) < max(max(m,n),p)/5.0 )
						u(i,j,k) = 255.0;
					else
						u(i,j,k) = 0.0;
				}
			}
		}
		break;
	case 4:			// "O" object
		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					xx = double(i)*dx + xMin;
					yy = double(j)*dy + yMin;
					zz = double(k)*dz + zMin;
					if( sqrt( (xx-xcent)*(xx-xcent) + (yy-ycent)*(yy-ycent) + (zz-ycent)*(zz-ycent) ) < m/3.0 && sqrt( (xx-xcent)*(xx-xcent) + (yy-ycent)*(yy-ycent) + (zz-zcent)*(zz-zcent) ) > m/4.8 )
						u(i,j,k) = 255.0;
					else
						u(i,j,k) = 0.0;
				}
			}
		}
		break;
	case 5:			// Bigger "O" object
		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					xx = double(i)*dx + xMin;
					yy = double(j)*dy + yMin;
					zz = double(k)*dz + zMin;
					if( sqrt( (xx-xcent)*(xx-xcent) + (yy-ycent)*(yy-ycent) + (zz-ycent)*(zz-ycent) ) < m/3.0 && sqrt( (xx-xcent)*(xx-xcent) + (yy-ycent)*(yy-ycent) + (zz-zcent)*(zz-zcent) ) > m/5.8 )
						u(i,j,k) = 255.0;
					else
						u(i,j,k) = 0.0;
				}
			}
		}
		break;
	case 6:			// "C" object
		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					xx = double(i)*dx + xMin;
					yy = double(j)*dy + yMin;
					zz = double(k)*dz + zMin;
					if( sqrt( (xx-xcent)*(xx-xcent) + (yy-ycent)*(yy-ycent) + (zz-zcent)*(zz-zcent) ) > m/3.2 || sqrt( (xx-xcent)*(xx-xcent) + (yy-ycent)*(yy-ycent) + (zz-zcent)*(zz-zcent)) < m/6.0 )
						u(i,j,k) = 0.0;
					else if( xx > xcent && fabs(yy-ycent) < 10.0 && zz > zcent-15.0 && zz < zcent+15.0 )
						u(i,j,k) = 0.0;
					else
						u(i,j,k) = 255.0;
				}
			}
		}
		break;
	case 7:			// bigger "C" object
				for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					xx = double(i)*dx + xMin;
					yy = double(j)*dy + yMin;
					zz = double(k)*dz + zMin;
					if( sqrt( (xx-xcent)*(xx-xcent) + (yy-ycent)*(yy-ycent) + (zz-zcent)*(zz-zcent) ) > m/3.0 || sqrt( (xx-xcent)*(xx-xcent) + (yy-ycent)*(yy-ycent) + (zz-zcent)*(zz-zcent)) < m/5.8 )
						u(i,j,k) = 0.0;
					else if( xx > xcent && fabs(yy-ycent) < 10.0 && zz > zcent-15.0 && zz < zcent+15.0 )
						u(i,j,k) = 0.0;
					else
						u(i,j,k) = 255.0;
				}
			}
		}
		break;

		//#####################################################################

	case 41:
		if( m!= 113 || n!= 129 || p != 129)		// Dimensions adjusted for MultiGrid solver
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(75,90,80);	// volume below is generated by Matlab (in doubles)
								// Signed integer reading does not produce perfect results.
		IO.read_bin( "c:\\igor\\Images\\reg3D\\75x90x80_r207ax_nu.img", A );

		for( k = 0; k < 80; k++ )
		{
			for( j = 0; j < 90; j++ )
			{	
				for(i = 0; i < 75; i++)
				{
					u(i+19,j+19,k+25) = A(i,j,k);
				}
			}
		}
		findMaxMin( u );
		break;


	case 410:
		if( m!= 113 || n!= 129 || p != 129)		// Dimensions adjusted for MultiGrid solver
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		IO.read_bin_unsigned_short_int( "c:\\igor\\Images\\reg3D\\deform1T.img", u, false );

		findMaxMin( u );
		u = u/256.0;	// convert from max = 255*256 to 255.
		findMaxMin( u );
		break;

	case 42:
		if( m!= 113 || n!= 129 || p != 129)		// Dimensions adjusted for MultiGrid solver
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(75,90,80);	// volume below is generated by Matlab (in doubles)
								// Signed integer reading does not produce perfect results.
		IO.read_bin( "c:\\igor\\Images\\reg3D\\75x90x80_r1931ax_nu.img", A );

		cout << "WARNING:  THIS IS A BAD SLICE" << endl;
		for( k = 0; k < 80; k++ )
		{
			for( j = 0; j < 90; j++ )
			{	
				for(i = 0; i < 75; i++)
				{
					u(i+19,j+19,k+25) = A(i,j,k);
				}
			}
		}
		break;

	case 43:
		if( m!= 113 || n!= 129 || p != 129)		// Dimensions adjusted for MultiGrid solver
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(75,90,80);	// volume below is generated by Matlab (in doubles)
								// Signed integer reading does not produce perfect results.
		IO.read_bin( "c:\\igor\\Images\\reg3D\\75x90x80_r4255ax_nu.img", A );

		for( k = 0; k < 80; k++ )
		{
			for( j = 0; j < 90; j++ )
			{	
				for(i = 0; i < 75; i++)
				{
					u(i+19,j+19,k+25) = A(i,j,k);
				}
			}
		}
		break;

	case 44:
		if( m!= 113 || n!= 129 || p != 129)		// Dimensions adjusted for MultiGrid solver
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(75,90,80);	// volume below is generated by Matlab (in doubles)
								// Signed integer reading does not produce perfect results.
		IO.read_bin( "c:\\igor\\Images\\reg3D\\75x90x80_r8731ax_nu.img", A );

		for( k = 0; k < 80; k++ )
		{
			for( j = 0; j < 90; j++ )
			{	
				for(i = 0; i < 75; i++)
				{
					u(i+19,j+19,k+25) = A(i,j,k);
				}
			}
		}
		findMaxMin( u );
		break;

	case 51:
		if( m!= 220 || n!= 220 || p != 220 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(150,180,160);	// volume below is generated by Matlab (in doubles)
									// Signed integer reading does not produce perfect results.
		//IO.read_bin( "c:\\igor\\Images\\reg3D\\150x180x160_r207ax_nu.img", A );

		IO.read_bin( "/u/home3/yanovsk/Pittsburgh/150x180x160_r207ax_nu.img", A );
		
		for( k = 0; k < 160; k++ )
		{
			for( j = 0; j < 180; j++ )
			{	
				for(i = 0; i < 150; i++)
				{
					u( i+grid.bxi, j+grid.byi, k+grid.bzi ) = A(i,j,k);
				}
			}
		}

		findMaxMin( u );
		break;

	case 54:
		if( m!= 220 || n!= 220 || p != 220 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(150,180,160);	// volume below is generated by Matlab (in doubles)
									// Signed integer reading does not produce perfect results.
		//IO.read_bin( "c:\\igor\\Images\\reg3D\\150x180x160_r8731ax_nu.img", A );
		IO.read_bin( "/u/home3/yanovsk/Pittsburgh/150x180x160_r8731ax_nu.img", A );

		for( k = 0; k < 160; k++ )
		{
			for( j = 0; j < 180; j++ )
			{	
				for(i = 0; i < 150; i++)
				{
					u( i+grid.bxi, j+grid.byi, k+grid.bzi ) = A(i,j,k);
				}
			}
		}

		findMaxMin( u );
		break;


	case 60:	// MASK for cases 61 and 62
		if( m != 128 || n != 160 || p != 128 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(222,222,222);

		IO.read_bin_unsigned_short_int( "G:\\Images\\ADNI1\\icbm_avg_53_t1tal_lin_mask_resample_US.img", A, true );
		//
		// Subsample (222x222x222 to 111x111x111), pad with 0's (to 128x160x128), 
		// and normalize intensities to fall in (0,255):
		//

		long i, j, k;
		for( k = 0; k < 111; k++ )
		{
			for( j = 0; j < 111; j++ )
			{
				for( i = 0; i < 111; i++ )
				{
					u(i+8,j+24,k+8) = A(2*i,2*j,2*k) / 257.0;
				}
			}
		}

		cout << endl << "MASK: ";
		findMaxMin( u );

		break;

	case 61:
		cout << m << " " << n << " " << p << endl;
		if( m != 128 || n != 160 || p != 128 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(222,222,222);
		cout << "Volume # (1-10) = ";
		//cin >> volN;
		cout << volN << endl;
			
/*		if(		volN == 1 )	{	fname = "F:\\Images\\ADNI1\\005_S_0004_15T_PA\\005_S_0004_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 2 )	{	fname = "F:\\Images\\ADNI1\\005_S_0005_15T_PA\\005_S_0005_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 3 )	{	fname = "F:\\Images\\ADNI1\\005_S_0007_15T_PA\\005_S_0007_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 4 )	{	fname = "F:\\Images\\ADNI1\\005_S_0008_15T_PA\\005_S_0008_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 5 )	{	fname = "F:\\Images\\ADNI1\\005_S_0009_15T_PA\\005_S_0009_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 6 )	{	fname = "F:\\Images\\ADNI1\\007_S_0001_15T_PA\\007_S_0001_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 7 )	{	fname = "F:\\Images\\ADNI1\\007_S_0003_15T_PA\\007_S_0003_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 8 )	{	fname = "F:\\Images\\ADNI1\\007_S_0004_15T_PA\\007_S_0004_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 9 )	{	fname = "F:\\Images\\ADNI1\\007_S_0011_15T_PA\\007_S_0011_15T_HC_T1_SPGR_resample222_N3.img";	}
		else if(volN ==10 )	{	fname = "F:\\Images\\ADNI1\\007_S_0015_15T_PA\\007_S_0015_15T_PA_T1_resample222_N3_blur.img";	}
		else				{	cout << "Incorrect volume number entered!!!" << endl;						exit(1);			}
*/

		if(		volN == 1 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0004_15T_PA/005_S_0004_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 2 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0005_15T_PA/005_S_0005_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 3 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0007_15T_PA/005_S_0007_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 4 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0008_15T_PA/005_S_0008_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 5 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0009_15T_PA/005_S_0009_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 6 )	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0001_15T_PA/007_S_0001_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 7 )	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0003_15T_PA/007_S_0003_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 8 )	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0004_15T_PA/007_S_0004_15T_PA_T1_resample222_N3_blur.img";	}
		else if(volN == 9 )	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0011_15T_PA/007_S_0011_15T_HC_T1_SPGR_resample222_N3.img";	}
		else if(volN == 10)	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0015_15T_PA/007_S_0015_15T_PA_T1_resample222_N3_blur.img";	}
		else				{	cout << "Incorrect volume number entered!!!" << endl;						exit(1);				}

		cout << "Image: " << fname << endl;

		IO.read_bin_unsigned_short_int( fname, A, true );

		//IO.read_bin_unsigned_short_int( "/u/home3/yanovsk/ADNI/007_S_0011_15T_PA/007_S_0011_15T_HC_T1_SPGR_resample222_N3.img", A, true );

		//
		// Subsample (222x222x222 to 111x111x111), pad with 0's (to 128x160x128), 
		// and normalize intensities to fall in (0,255):
		//
		for( k = 0; k < 111; k++ )
		{
			for( j = 0; j < 111; j++ )
			{
				for( i = 0; i < 111; i++ )
				{
					u(i+8,j+24,k+8) = A(2*i,2*j,2*k) / 257.0;
				}
			}
		}

		findMaxMin( u );
		break;

	case 62:
		cout << m << " " << n << " " << p << endl;
		if( m != 128 || n != 160 || p != 128 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(222,222,222);
		cout << "Volume # (1-10) = ";
		//cin >> volN;
		cout << volN << endl;

/*		if(		volN == 1 )	{	fname = "F:\\Images\\ADNI1\\005_S_0004_15T_PA\\005_S_0004_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 2 )	{	fname = "F:\\Images\\ADNI1\\005_S_0005_15T_PA\\005_S_0005_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 3 )	{	fname = "F:\\Images\\ADNI1\\005_S_0007_15T_PA\\005_S_0007_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 4 )	{	fname = "F:\\Images\\ADNI1\\005_S_0008_15T_PA\\005_S_0008_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 5 )	{	fname = "F:\\Images\\ADNI1\\005_S_0009_15T_PA\\005_S_0009_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 6 )	{	fname = "F:\\Images\\ADNI1\\007_S_0001_15T_PA\\007_S_0001_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 7 )	{	fname = "F:\\Images\\ADNI1\\007_S_0003_15T_PA\\007_S_0003_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 8 )	{	fname = "F:\\Images\\ADNI1\\007_S_0004_15T_PA\\007_S_0004_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 9 )	{	fname = "F:\\Images\\ADNI1\\007_S_0011_15T_PA\\007_S_0011_15T_HC_T2_SPGR_resample222_N3.img";	}
		else if(volN ==10 )	{	fname = "F:\\Images\\ADNI1\\007_S_0015_15T_PA\\007_S_0015_15T_PA_T2_resample222_N3_blur.img";	}
		else				{	cout << "Incorrect volume number entered!!!" << endl;						exit(1);			}
*/

		if(		volN == 1 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0004_15T_PA/005_S_0004_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 2 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0005_15T_PA/005_S_0005_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 3 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0007_15T_PA/005_S_0007_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 4 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0008_15T_PA/005_S_0008_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 5 )	{	fname = "/u/home3/yanovsk/ADNI1/005_S_0009_15T_PA/005_S_0009_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 6 )	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0001_15T_PA/007_S_0001_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 7 )	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0003_15T_PA/007_S_0003_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 8 )	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0004_15T_PA/007_S_0004_15T_PA_T2_resample222_N3_blur.img";	}
		else if(volN == 9 )	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0011_15T_PA/007_S_0011_15T_HC_T2_SPGR_resample222_N3.img";	}
		else if(volN == 10)	{	fname = "/u/home3/yanovsk/ADNI1/007_S_0015_15T_PA/007_S_0015_15T_PA_T2_resample222_N3_blur.img";	}
		else				{	cout << "Incorrect volume number entered!!!" << endl;						exit(1);				}

		cout << "Image: " << fname << endl;

		IO.read_bin_unsigned_short_int( fname, A, true );
		
		//IO.read_bin_unsigned_short_int( "/u/home3/yanovsk/ADNI/007_S_0011_15T_PA/007_S_0011_15T_HC_T2_SPGR_resample222_N3.img", A, true );
		//
		// Subsample (222x222x222 to 111x111x111), pad with 0's (to 128x160x128), 
		// and normalize intensities to fall in (0,255):
		//
		for( k = 0; k < 111; k++ )
		{
			for( j = 0; j < 111; j++ )
			{
				for( i = 0; i < 111; i++ )
				{
					u(i+8,j+24,k+8) = A(2*i,2*j,2*k) / 257.0;
				}
			}
		}

		findMaxMin( u );
		break;

	case 71:
		if( m != 222 || n != 222 || p != 222 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		IO.read_bin_unsigned_short_int( "c:\\igor\\Images\\ADNI\\005_S_0004_15T_PA\\005_S_0004_15T_PA_T1_resample222_N3_blur.img", u, true );
		//IO.read_bin_unsigned_short_int( "c:\\igor\\Images\\ADNI\\005_S_0005_15T_PA\\005_S_0005_15T_PA_T1_resample222_N3_blur.img", u, true );
		
		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					u(i,j,k) = u(i,j,k)/257.0;
				}
			}
		}

		findMaxMin( u );
		break;

	case 72:
		if( m!= 222 || n!= 222 || p != 222 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		IO.read_bin_unsigned_short_int( "c:\\igor\\Images\\ADNI\\005_S_0004_15T_PA\\005_S_0004_15T_PA_T2_resample222_N3_blur.img", u, true );
		//IO.read_bin_unsigned_short_int( "c:\\igor\\Images\\ADNI\\005_S_0005_15T_PA\\005_S_0005_15T_PA_T2_resample222_N3_blur.img", u, true );

		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					u(i,j,k) = u(i,j,k)/257.0;
				}
			}
		}

		findMaxMin( u );
		break;

	case 81:	// LITHIUM data
		if( m!= 220 || n!= 256 || p != 220 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(220,220,220);
		//IO.read_bin_unsigned_short_int( "Z:\\Lithium_data\\aaa_T1_READY.img", A, true );
		//IO.read_bin_unsigned_short_int( "F:\\Lithium_data\\aaa_T1_READY.img", A, true );
		
		IO.read_bin_unsigned_short_int( "/u/home3/yanovsk/Lithium/aaa_T1_READY.img", A, true );

		for( k = 0; k < 220; k++ )
		{
			for( j = 0; j < 220; j++ )
			{	
				for(i = 0; i < 220; i++)
				{
					u(i,j+18,k) = A(i,j,k);
				}
			}
		}
		
		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					u(i,j,k) = u(i,j,k)/257.0;
				}
			}
		}
				
		cout << "LITHIUM DATA:  ";
		findMaxMin( u );

		break;

	case 82:	// LITHIUM data
		if( m!= 220 || n!= 256 || p != 220 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		A.initialize(220,220,220);
		//IO.read_bin_unsigned_short_int( "Z:\\Lithium_data\\aaa_T2_READY.img", A, true );
		//IO.read_bin_unsigned_short_int( "F:\\Lithium_data\\aaa_T2_READY.img", A, true );

		IO.read_bin_unsigned_short_int( "/u/home3/yanovsk/Lithium/aaa_T2_READY.img", A, true );

		for( k = 0; k < 220; k++ )
		{
			for( j = 0; j < 220; j++ )
			{	
				for(i = 0; i < 220; i++)
				{
					u(i,j+18,k) = A(i,j,k);
				}
			}
		}

		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					u(i,j,k) = u(i,j,k)/257.0;
				}
			}
		}

		cout << "LITHIUM DATA:  ";
		findMaxMin( u );
		
		break;

	case 100:	// GRID IMAGE:
		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					u(i,j,k) = 255.0;
				}
			}
		}

		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					/*if( (i%10) == 0 )
					{
						u(i+4,j,k) = 0.0;
						u(i+5,j,k) = 0.0;
					}				
					if( (j%10) == 0 )
					{
						u(i,j+4,k) = 0.0;
						u(i,j+5,k) = 0.0;
					}
					if( (k%10) == 0 )
					{
						u(i,j,k+4) = 0.0;
						u(i,j,k+5) = 0.0;
					}*/
					
					if( (i%6) == 0 )
					{
						u(i+3,j,k) = 0.0;
					}				
					if( (j%6) == 0 )
					{
						u(i,j+3,k) = 0.0;
					}
					if( (k%6) == 0 )
					{
						u(i,j,k+3) = 0.0;
					}
				}
			}
		}
		break;


		case 171:
			if( m != 256 || n != 256 || p != 256 )
			{
				cout << "Dimensions do not match!" << endl;
				exit(1);
			}

			A.initialize(256,256,256);
			cout << "Volume # (1-10) = ";
			//cin >> volN;
			cout << volN << endl;
			
			/*
			if(		volN == 1 )	{	fname = "F:\\ADNI_change\\002_S_0413\\ADNI_002_S_0413_sc_ICBM9P.img";	maxI = 2307.0;	}
			else if(volN == 2 )	{	fname = "F:\\ADNI_change\\007_S_0041\\ADNI_007_S_0041_sc_ICBM9P.img";	maxI = 2624.0;	}
			else if(volN == 3 )	{	fname = "F:\\ADNI_change\\007_S_0068\\ADNI_007_S_0068_sc_ICBM9P.img";	maxI = 2929.0;	}
			else if(volN == 4 )	{	fname = "F:\\ADNI_change\\007_S_0070\\ADNI_007_S_0070_sc_ICBM9P.img";	maxI = 2576.0;	}
			else if(volN == 5 )	{	fname = "F:\\ADNI_change\\007_S_0101\\ADNI_007_S_0101_sc_ICBM9P.img";	maxI = 2661.0;	}
			else if(volN == 6 )	{	fname = "F:\\ADNI_change\\007_S_0128\\ADNI_007_S_0128_sc_ICBM9P.img";	maxI = 3217.0;	}
			else if(volN == 7 )	{	fname = "F:\\ADNI_change\\011_S_0003\\ADNI_011_S_0003_sc_ICBM9P.img";	maxI = 1739.0;	}
			else if(volN == 8 )	{	fname = "F:\\ADNI_change\\022_S_0129\\ADNI_022_S_0129_sc_ICBM9P.img";	maxI = 1159.0;	}
			else if(volN == 9 )	{	fname = "F:\\ADNI_change\\023_S_0083\\ADNI_023_S_0083_sc_ICBM9P.img";	maxI = 1211.0;	}
			else if(volN == 10)	{	fname = "F:\\ADNI_change\\027_S_0074\\ADNI_027_S_0074_sc_ICBM9P.img";	maxI = 3804.0;	}
			else				{	cout << "Incorrect volume number entered!!!" << endl;						exit(1);	}
			*/

			if(		volN == 1 )	{	fname = "data/S.img";	maxI = 8091;	}
			else if(volN == 2 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0041/ADNI_007_S_0041_sc_ICBM9P.img";	maxI = 2624.0;	}
			else if(volN == 3 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0068/ADNI_007_S_0068_sc_ICBM9P.img";	maxI = 2929.0;	}
			else if(volN == 4 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0070/ADNI_007_S_0070_sc_ICBM9P.img";	maxI = 2576.0;	}
			else if(volN == 5 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0101/ADNI_007_S_0101_sc_ICBM9P.img";	maxI = 2661.0;	}
			else if(volN == 6 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0128/ADNI_007_S_0128_sc_ICBM9P.img";	maxI = 3217.0;	}
			else if(volN == 7 )	{	fname = "/u/home3/yanovsk/ADNI2/011_S_0003/ADNI_011_S_0003_sc_ICBM9P.img";	maxI = 1739.0;	}
			else if(volN == 8 )	{	fname = "/u/home3/yanovsk/ADNI2/022_S_0129/ADNI_022_S_0129_sc_ICBM9P.img";	maxI = 1159.0;	}
			else if(volN == 9 )	{	fname = "/u/home3/yanovsk/ADNI2/023_S_0083/ADNI_023_S_0083_sc_ICBM9P.img";	maxI = 1211.0;	}
			else if(volN == 10)	{	fname = "/u/home3/yanovsk/ADNI2/027_S_0074/ADNI_027_S_0074_sc_ICBM9P.img";	maxI = 3804.0;	}
			else				{	cout << "Incorrect volume number entered!!!" << endl;						exit(1);	}
	
			cout << "Image: " << fname << endl;

//			IO.read_bin_float( fname, A );
			IO.read_bin_unsigned_short_int( fname, A, 0 );

/*			for( k = 0; k < 220; k++ )
			{
				for( j = 0; j < 220; j++ )
				{	
					for(i = 0; i < 220; i++)
					{
						u(i+18,j+18,k+18) = A(i,j,k);
					}
				}
			}
*/
			for( k = 0; k < p; k++ )
			{
				for( j = 0; j < n; j++ )
				{
					for( i = 0; i < m; i++ )
					{
						u(i,j,k) = A(i,j,k)*255.0/maxI;
					}
				}
			}
//			cout << A(1,1,1) << endl;

			findMaxMin( u );
			
			break;

	case 172:
			if( m != 256 || n != 256 || p != 256 )
			{
				cout << "Dimensions do not match!" << endl;
				exit(1);
			}

			A.initialize(256,256,256);
			cout << "Volume # (1-10) = ";
			//cin >> volN;
			cout << volN << endl;

			/*
			if(		volN == 1 )	{	fname = "F:\\ADNI_change\\002_S_0413\\ADNI_002_S_0413_12Mo_ICBM9P.img";	maxI = 2307.0;	}
			else if(volN == 2 )	{	fname = "F:\\ADNI_change\\007_S_0041\\ADNI_007_S_0041_12Mo_ICBM9P.img";	maxI = 2624.0;	}
			else if(volN == 3 )	{	fname = "F:\\ADNI_change\\007_S_0068\\ADNI_007_S_0068_12Mo_ICBM9P.img";	maxI = 2929.0;	}
			else if(volN == 4 )	{	fname = "F:\\ADNI_change\\007_S_0070\\ADNI_007_S_0070_12Mo_ICBM9P.img";	maxI = 2576.0;	}
			else if(volN == 5 )	{	fname = "F:\\ADNI_change\\007_S_0101\\ADNI_007_S_0101_12Mo_ICBM9P.img";	maxI = 2661.0;	}
			else if(volN == 6 )	{	fname = "F:\\ADNI_change\\007_S_0128\\ADNI_007_S_0128_12Mo_ICBM9P.img";	maxI = 3217.0;	}
			else if(volN == 7 )	{	fname = "F:\\ADNI_change\\011_S_0003\\ADNI_011_S_0003_12Mo_ICBM9P.img";	maxI = 1739.0;	}
			else if(volN == 8 )	{	fname = "F:\\ADNI_change\\022_S_0129\\ADNI_022_S_0129_12Mo_ICBM9P.img";	maxI = 1159.0;	}
			else if(volN == 9 )	{	fname = "F:\\ADNI_change\\023_S_0083\\ADNI_023_S_0083_12Mo_ICBM9P.img";	maxI = 1211.0;	}
			else if(volN == 10)	{	fname = "F:\\ADNI_change\\027_S_0074\\ADNI_027_S_0074_12Mo_ICBM9P.img";	maxI = 3804.0;	}
			else				{	cout << "Incorrect volume number entered!!!" << endl;						exit(1);	}
			*/

			
			if(		volN == 1 )	{	fname = "data/T.img";	maxI = 8180;	}
			else if(volN == 2 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0041/ADNI_007_S_0041_12Mo_ICBM9P.img";	maxI = 2624.0;	}
			else if(volN == 3 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0068/ADNI_007_S_0068_12Mo_ICBM9P.img";	maxI = 2929.0;	}
			else if(volN == 4 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0070/ADNI_007_S_0070_12Mo_ICBM9P.img";	maxI = 2576.0;	}
			else if(volN == 5 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0101/ADNI_007_S_0101_12Mo_ICBM9P.img";	maxI = 2661.0;	}
			else if(volN == 6 )	{	fname = "/u/home3/yanovsk/ADNI2/007_S_0128/ADNI_007_S_0128_12Mo_ICBM9P.img";	maxI = 3217.0;	}
			else if(volN == 7 )	{	fname = "/u/home3/yanovsk/ADNI2/011_S_0003/ADNI_011_S_0003_12Mo_ICBM9P.img";	maxI = 1739.0;	}
			else if(volN == 8 )	{	fname = "/u/home3/yanovsk/ADNI2/022_S_0129/ADNI_022_S_0129_12Mo_ICBM9P.img";	maxI = 1159.0;	}
			else if(volN == 9 )	{	fname = "/u/home3/yanovsk/ADNI2/023_S_0083/ADNI_023_S_0083_12Mo_ICBM9P.img";	maxI = 1211.0;	}
			else if(volN == 10)	{	fname = "/u/home3/yanovsk/ADNI2/027_S_0074/ADNI_027_S_0074_12Mo_ICBM9P.img";	maxI = 3804.0;	}
			else				{	cout << "Incorrect volume number entered!!!" << endl;						exit(1);	}
			

			cout << "Image: " << fname << endl;

//			IO.read_bin_float( fname, A );
			IO.read_bin_unsigned_short_int( fname, A, 0);
			
/*			for( k = 0; k < 220; k++ )
			{
				for( j = 0; j < 220; j++ )
				{	
					for(i = 0; i < 220; i++)
					{
						u(i+18,j+18,k+18) = A(i,j,k);
					}
				}
			}
*/
			for( k = 0; k < p; k++ )
			{
				for( j = 0; j < n; j++ )
				{
					for( i = 0; i < m; i++ )
					{
						u(i,j,k) = A(i,j,k)*255.0/maxI;
					}
				}
			}

			findMaxMin( u );
			
		break;

	case 181:
		if( m != 230 || n != 230 || p != 230 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		cout << "Volume # (1-30) = ";
		//cin >> volN;
		cout << volN << endl;

		/*
		if(		volN == 1 )	{	fname = "F:\\APOE\\101_time1_READY_le.img";	}
		else if(volN == 2 )	{	fname = "F:\\APOE\\103_time1_READY_le.img";	}
		else if(volN == 3 )	{	fname = "F:\\APOE\\104_time1_READY_le.img";	}
		else if(volN == 4 )	{	fname = "F:\\APOE\\106_time1_READY_le.img";	}
		else if(volN == 5 )	{	fname = "F:\\APOE\\127_time1_READY_le.img";	}
		else if(volN == 6 )	{	fname = "F:\\APOE\\141_time1_READY_le.img";	}
		else if(volN == 7 )	{	fname = "F:\\APOE\\163_time1_READY_le.img";	}
		else if(volN == 8 )	{	fname = "F:\\APOE\\183_time1_READY_le.img";	}
		else if(volN == 9 )	{	fname = "F:\\APOE\\212_time1_READY_le.img";	}
		else if(volN == 10)	{	fname = "F:\\APOE\\219_time1_READY_le.img";	}
		else if(volN == 11)	{	fname = "F:\\APOE\\225_time1_READY_le.img";	}
		else if(volN == 12)	{	fname = "F:\\APOE\\231_time1_READY_le.img";	}
		else if(volN == 13)	{	fname = "F:\\APOE\\239_time1_READY_le.img";	}
		else if(volN == 14)	{	fname = "F:\\APOE\\273_time1_READY_le.img";	}
		else if(volN == 15)	{	fname = "F:\\APOE\\281_time1_READY_le.img";	}
		else if(volN == 16)	{	fname = "F:\\APOE\\289_time1_READY_le.img";	}
		else if(volN == 17)	{	fname = "F:\\APOE\\292_time1_READY_le.img";	}
		else if(volN == 18)	{	fname = "F:\\APOE\\h10_time1_READY_le.img";	}
		else if(volN == 19)	{	fname = "F:\\APOE\\h21_time1_READY_le.img";	}
		else if(volN == 20)	{	fname = "F:\\APOE\\h22_time1_READY_le.img";	}
		else if(volN == 21)	{	fname = "F:\\APOE\\h24_time1_READY_le.img";	}
		else if(volN == 22)	{	fname = "F:\\APOE\\h34_time1_READY_le.img";	}
		else if(volN == 23)	{	fname = "F:\\APOE\\h46_time1_READY_le.img";	}
		else if(volN == 24)	{	fname = "F:\\APOE\\h49_time1_READY_le.img";	}
		else if(volN == 25)	{	fname = "F:\\APOE\\h50_time1_READY_le.img";	}
		else if(volN == 26)	{	fname = "F:\\APOE\\h52_time1_READY_le.img";	}
		else if(volN == 27)	{	fname = "F:\\APOE\\h53_time1_READY_le.img";	}
		else if(volN == 28)	{	fname = "F:\\APOE\\h58_time1_READY_le.img";	}
		else if(volN == 29)	{	fname = "F:\\APOE\\h59_time1_READY_le.img";	}
		else if(volN == 30)	{	fname = "F:\\APOE\\h69_time1_READY_le.img";	}
		else				{	cout << "Incorrect volume number entered!!!" << endl;	exit(1);	}
		*/
		
		
		if(		volN == 1 )	{	fname = "/u/home3/feuille/APOE/101_time1_READY_le.img";	}
		else if(volN == 2 )	{	fname = "/u/home3/feuille/APOE/103_time1_READY_le.img";	}
		else if(volN == 3 )	{	fname = "/u/home3/feuille/APOE/104_time1_READY_le.img";	}
		else if(volN == 4 )	{	fname = "/u/home3/feuille/APOE/106_time1_READY_le.img";	}
		else if(volN == 5 )	{	fname = "/u/home3/feuille/APOE/127_time1_READY_le.img";	}
		else if(volN == 6 )	{	fname = "/u/home3/feuille/APOE/141_time1_READY_le.img";	}
		else if(volN == 7 )	{	fname = "/u/home3/feuille/APOE/163_time1_READY_le.img";	}
		else if(volN == 8 )	{	fname = "/u/home3/feuille/APOE/183_time1_READY_le.img";	}
		else if(volN == 9 )	{	fname = "/u/home3/feuille/APOE/212_time1_READY_le.img";	}
		else if(volN == 10)	{	fname = "/u/home3/feuille/APOE/219_time1_READY_le.img";	}
		else if(volN == 11)	{	fname = "/u/home3/feuille/APOE/225_time1_READY_le.img";	}
		else if(volN == 12)	{	fname = "/u/home3/feuille/APOE/231_time1_READY_le.img";	}
		else if(volN == 13)	{	fname = "/u/home3/feuille/APOE/239_time1_READY_le.img";	}
		else if(volN == 14)	{	fname = "/u/home3/feuille/APOE/273_time1_READY_le.img";	}
		else if(volN == 15)	{	fname = "/u/home3/feuille/APOE/281_time1_READY_le.img";	}
		else if(volN == 16)	{	fname = "/u/home3/feuille/APOE/289_time1_READY_le.img";	}
		else if(volN == 17)	{	fname = "/u/home3/feuille/APOE/292_time1_READY_le.img";	}
		else if(volN == 18)	{	fname = "/u/home3/feuille/APOE/h10_time1_READY_le.img";	}
		else if(volN == 19)	{	fname = "/u/home3/feuille/APOE/h21_time1_READY_le.img";	}
		else if(volN == 20)	{	fname = "/u/home3/feuille/APOE/h22_time1_READY_le.img";	}
		else if(volN == 21)	{	fname = "/u/home3/feuille/APOE/h24_time1_READY_le.img";	}
		else if(volN == 22)	{	fname = "/u/home3/feuille/APOE/h34_time1_READY_le.img";	}
		else if(volN == 23)	{	fname = "/u/home3/feuille/APOE/h46_time1_READY_le.img";	}
		else if(volN == 24)	{	fname = "/u/home3/feuille/APOE/h49_time1_READY_le.img";	}
		else if(volN == 25)	{	fname = "/u/home3/feuille/APOE/h50_time1_READY_le.img";	}
		else if(volN == 26)	{	fname = "/u/home3/feuille/APOE/h52_time1_READY_le.img";	}
		else if(volN == 27)	{	fname = "/u/home3/feuille/APOE/h53_time1_READY_le.img";	}
		else if(volN == 28)	{	fname = "/u/home3/feuille/APOE/h58_time1_READY_le.img";	}
		else if(volN == 29)	{	fname = "/u/home3/feuille/APOE/h59_time1_READY_le.img";	}
		else if(volN == 30)	{	fname = "/u/home3/feuille/APOE/h69_time1_READY_le.img";	}
		else				{	cout << "Incorrect volume number entered!!!" << endl;	exit(1);	}
		

		cout << "Image: " << fname << endl;

		IO.read_bin_unsigned_short_int( fname, u, false );

		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					u(i,j,k) = u(i,j,k)/257.0;
				}
			}
		}

		findMaxMin( u );
		
		break;

	case 182:
		if( m != 230 || n != 230 || p != 230 )
		{
			cout << "Dimensions do not match!" << endl;
			exit(1);
		}

		cout << "Volume # (1-30) = ";
		//cin >> volN;
		cout << volN << endl;

		
		/*
		if(		volN == 1 )	{	fname = "F:\\APOE\\101_time2_READY_le.img";	}
		else if(volN == 2 )	{	fname = "F:\\APOE\\103_time2_READY_le.img";	}
		else if(volN == 3 )	{	fname = "F:\\APOE\\104_time2_READY_le.img";	}
		else if(volN == 4 )	{	fname = "F:\\APOE\\106_time2_READY_le.img";	}
		else if(volN == 5 )	{	fname = "F:\\APOE\\127_time2_READY_le.img";	}
		else if(volN == 6 )	{	fname = "F:\\APOE\\141_time2_READY_le.img";	}
		else if(volN == 7 )	{	fname = "F:\\APOE\\163_time2_READY_le.img";	}
		else if(volN == 8 )	{	fname = "F:\\APOE\\183_time2_READY_le.img";	}
		else if(volN == 9 )	{	fname = "F:\\APOE\\212_time2_READY_le.img";	}
		else if(volN == 10)	{	fname = "F:\\APOE\\219_time2_READY_le.img";	}
		else if(volN == 11)	{	fname = "F:\\APOE\\225_time2_READY_le.img";	}
		else if(volN == 12)	{	fname = "F:\\APOE\\231_time2_READY_le.img";	}
		else if(volN == 13)	{	fname = "F:\\APOE\\239_time2_READY_le.img";	}
		else if(volN == 14)	{	fname = "F:\\APOE\\273_time2_READY_le.img";	}
		else if(volN == 15)	{	fname = "F:\\APOE\\281_time2_READY_le.img";	}
		else if(volN == 16)	{	fname = "F:\\APOE\\289_time2_READY_le.img";	}
		else if(volN == 17)	{	fname = "F:\\APOE\\292_time2_READY_le.img";	}
		else if(volN == 18)	{	fname = "F:\\APOE\\h10_time2_READY_le.img";	}
		else if(volN == 19)	{	fname = "F:\\APOE\\h21_time2_READY_le.img";	}
		else if(volN == 20)	{	fname = "F:\\APOE\\h22_time2_READY_le.img";	}
		else if(volN == 21)	{	fname = "F:\\APOE\\h24_time2_READY_le.img";	}
		else if(volN == 22)	{	fname = "F:\\APOE\\h34_time2_READY_le.img";	}
		else if(volN == 23)	{	fname = "F:\\APOE\\h46_time2_READY_le.img";	}
		else if(volN == 24)	{	fname = "F:\\APOE\\h49_time2_READY_le.img";	}
		else if(volN == 25)	{	fname = "F:\\APOE\\h50_time2_READY_le.img";	}
		else if(volN == 26)	{	fname = "F:\\APOE\\h52_time2_READY_le.img";	}
		else if(volN == 27)	{	fname = "F:\\APOE\\h53_time2_READY_le.img";	}
		else if(volN == 28)	{	fname = "F:\\APOE\\h58_time2_READY_le.img";	}
		else if(volN == 29)	{	fname = "F:\\APOE\\h59_time2_READY_le.img";	}
		else if(volN == 30)	{	fname = "F:\\APOE\\h69_time2_READY_le.img";	}
		else				{	cout << "Incorrect volume number entered!!!" << endl;	exit(1);	}
		*/
		
		
		if(		volN == 1 )	{	fname = "/u/home3/feuille/APOE/101_time2_READY_le.img";	}
		else if(volN == 2 )	{	fname = "/u/home3/feuille/APOE/103_time2_READY_le.img";	}
		else if(volN == 3 )	{	fname = "/u/home3/feuille/APOE/104_time2_READY_le.img";	}
		else if(volN == 4 )	{	fname = "/u/home3/feuille/APOE/106_time2_READY_le.img";	}
		else if(volN == 5 )	{	fname = "/u/home3/feuille/APOE/127_time2_READY_le.img";	}
		else if(volN == 6 )	{	fname = "/u/home3/feuille/APOE/141_time2_READY_le.img";	}
		else if(volN == 7 )	{	fname = "/u/home3/feuille/APOE/163_time2_READY_le.img";	}
		else if(volN == 8 )	{	fname = "/u/home3/feuille/APOE/183_time2_READY_le.img";	}
		else if(volN == 9 )	{	fname = "/u/home3/feuille/APOE/212_time2_READY_le.img";	}
		else if(volN == 10)	{	fname = "/u/home3/feuille/APOE/219_time2_READY_le.img";	}
		else if(volN == 11)	{	fname = "/u/home3/feuille/APOE/225_time2_READY_le.img";	}
		else if(volN == 12)	{	fname = "/u/home3/feuille/APOE/231_time2_READY_le.img";	}
		else if(volN == 13)	{	fname = "/u/home3/feuille/APOE/239_time2_READY_le.img";	}
		else if(volN == 14)	{	fname = "/u/home3/feuille/APOE/273_time2_READY_le.img";	}
		else if(volN == 15)	{	fname = "/u/home3/feuille/APOE/281_time2_READY_le.img";	}
		else if(volN == 16)	{	fname = "/u/home3/feuille/APOE/289_time2_READY_le.img";	}
		else if(volN == 17)	{	fname = "/u/home3/feuille/APOE/292_time2_READY_le.img";	}
		else if(volN == 18)	{	fname = "/u/home3/feuille/APOE/h10_time2_READY_le.img";	}
		else if(volN == 19)	{	fname = "/u/home3/feuille/APOE/h21_time2_READY_le.img";	}
		else if(volN == 20)	{	fname = "/u/home3/feuille/APOE/h22_time2_READY_le.img";	}
		else if(volN == 21)	{	fname = "/u/home3/feuille/APOE/h24_time2_READY_le.img";	}
		else if(volN == 22)	{	fname = "/u/home3/feuille/APOE/h34_time2_READY_le.img";	}
		else if(volN == 23)	{	fname = "/u/home3/feuille/APOE/h46_time2_READY_le.img";	}
		else if(volN == 24)	{	fname = "/u/home3/feuille/APOE/h49_time2_READY_le.img";	}
		else if(volN == 25)	{	fname = "/u/home3/feuille/APOE/h50_time2_READY_le.img";	}
		else if(volN == 26)	{	fname = "/u/home3/feuille/APOE/h52_time2_READY_le.img";	}
		else if(volN == 27)	{	fname = "/u/home3/feuille/APOE/h53_time2_READY_le.img";	}
		else if(volN == 28)	{	fname = "/u/home3/feuille/APOE/h58_time2_READY_le.img";	}
		else if(volN == 29)	{	fname = "/u/home3/feuille/APOE/h59_time2_READY_le.img";	}
		else if(volN == 30)	{	fname = "/u/home3/feuille/APOE/h69_time2_READY_le.img";	}
		

		cout << "Image: " << fname << endl;

		IO.read_bin_unsigned_short_int( fname, u, false );

		for( k = 0; k < p; k++ )
		{
			for( j = 0; j < n; j++ )
			{
				for( i = 0; i < m; i++ )
				{
					u(i,j,k) = u(i,j,k)/257.0;
				}
			}
		}

		findMaxMin( u );

		break;

		//#####################################################################

	default: cout << "Incorrect Specification of the level set function." << endl;
         exit(1);
		 break;
	} // end switch

}
